Terminals which are not used

   PROCEDURE
   PROGRAM
   VAR
   INTEGER
   REAL
   TRUE
   FALSE
   LE
   SE
   EQ
   NQ
   NE
   BOOLEAN
   RETURN
   DECREMENT
   INCREMENT
   NUL
   FOR
   WHILE
   DOUBLE
   FUNCTION
   DO
   BEG
   END
   ARRAY
   DIV
   OF
   OR
   AND
   NOT


State 23 conflicts: 3 reduce/reduce
State 25 conflicts: 2 shift/reduce


Grammar

    0 $accept: stmts $end

    1 stmts: stmt
    2      | stmts stmt

    3 stmt: IDENT '=' expr ';'
    4     | IF '(' expr ')' stmt
    5     | IF '(' expr ')' stmts ELSE stmts

    6 expr: INTEGER_LITERAL
    7     | REAL_LITERAL
    8     | IDENT
    9     | expr '-' expr
   10     | expr '*' expr
   11     | '-' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 5
')' (41) 4 5
'*' (42) 10
'-' (45) 9 11
';' (59) 3
'=' (61) 3
error (256)
IDENT (258) 3 8
IF (259) 4 5
PROCEDURE (260)
PROGRAM (261)
VAR (262)
INTEGER (263)
REAL (264)
TRUE (265)
FALSE (266)
LE (267)
SE (268)
EQ (269)
NQ (270)
NE (271)
BOOLEAN (272)
RETURN (273)
DECREMENT (274)
INCREMENT (275)
NUL (276)
FOR (277)
WHILE (278)
DOUBLE (279)
FUNCTION (280)
DO (281)
BEG (282)
END (283)
ARRAY (284)
DIV (285)
OF (286)
OR (287)
AND (288)
NOT (289)
INTEGER_LITERAL (290) 6
REAL_LITERAL (291) 7
ELSE (292) 5
IFPREC (293)
MINUS (294)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
stmts (47)
    on left: 1 2, on right: 0 2 5
stmt (48)
    on left: 3 4 5, on right: 1 2 4
expr (49)
    on left: 6 7 8 9 10 11, on right: 3 4 5 9 10 11


state 0

    0 $accept: . stmts $end

    IDENT  shift, and go to state 1
    IF     shift, and go to state 2

    stmts  go to state 3
    stmt   go to state 4


state 1

    3 stmt: IDENT . '=' expr ';'

    '='  shift, and go to state 5


state 2

    4 stmt: IF . '(' expr ')' stmt
    5     | IF . '(' expr ')' stmts ELSE stmts

    '('  shift, and go to state 6


state 3

    0 $accept: stmts . $end
    2 stmts: stmts . stmt

    $end   shift, and go to state 7
    IDENT  shift, and go to state 1
    IF     shift, and go to state 2

    stmt  go to state 8


state 4

    1 stmts: stmt .

    $default  reduce using rule 1 (stmts)


state 5

    3 stmt: IDENT '=' . expr ';'

    IDENT            shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 10
    REAL_LITERAL     shift, and go to state 11
    '-'              shift, and go to state 12

    expr  go to state 13


state 6

    4 stmt: IF '(' . expr ')' stmt
    5     | IF '(' . expr ')' stmts ELSE stmts

    IDENT            shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 10
    REAL_LITERAL     shift, and go to state 11
    '-'              shift, and go to state 12

    expr  go to state 14


state 7

    0 $accept: stmts $end .

    $default  accept


state 8

    2 stmts: stmts stmt .

    $default  reduce using rule 2 (stmts)


state 9

    8 expr: IDENT .

    $default  reduce using rule 8 (expr)


state 10

    6 expr: INTEGER_LITERAL .

    $default  reduce using rule 6 (expr)


state 11

    7 expr: REAL_LITERAL .

    $default  reduce using rule 7 (expr)


state 12

   11 expr: '-' . expr

    IDENT            shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 10
    REAL_LITERAL     shift, and go to state 11
    '-'              shift, and go to state 12

    expr  go to state 15


state 13

    3 stmt: IDENT '=' expr . ';'
    9 expr: expr . '-' expr
   10     | expr . '*' expr

    '-'  shift, and go to state 16
    '*'  shift, and go to state 17
    ';'  shift, and go to state 18


state 14

    4 stmt: IF '(' expr . ')' stmt
    5     | IF '(' expr . ')' stmts ELSE stmts
    9 expr: expr . '-' expr
   10     | expr . '*' expr

    '-'  shift, and go to state 16
    '*'  shift, and go to state 17
    ')'  shift, and go to state 19


state 15

    9 expr: expr . '-' expr
   10     | expr . '*' expr
   11     | '-' expr .

    $default  reduce using rule 11 (expr)


state 16

    9 expr: expr '-' . expr

    IDENT            shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 10
    REAL_LITERAL     shift, and go to state 11
    '-'              shift, and go to state 12

    expr  go to state 20


state 17

   10 expr: expr '*' . expr

    IDENT            shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 10
    REAL_LITERAL     shift, and go to state 11
    '-'              shift, and go to state 12

    expr  go to state 21


state 18

    3 stmt: IDENT '=' expr ';' .

    $default  reduce using rule 3 (stmt)


state 19

    4 stmt: IF '(' expr ')' . stmt
    5     | IF '(' expr ')' . stmts ELSE stmts

    IDENT  shift, and go to state 1
    IF     shift, and go to state 2

    stmts  go to state 22
    stmt   go to state 23


state 20

    9 expr: expr . '-' expr
    9     | expr '-' expr .
   10     | expr . '*' expr

    '*'  shift, and go to state 17

    $default  reduce using rule 9 (expr)


state 21

    9 expr: expr . '-' expr
   10     | expr . '*' expr
   10     | expr '*' expr .

    $default  reduce using rule 10 (expr)


state 22

    2 stmts: stmts . stmt
    5 stmt: IF '(' expr ')' stmts . ELSE stmts

    IDENT  shift, and go to state 1
    IF     shift, and go to state 2
    ELSE   shift, and go to state 24

    stmt  go to state 8


state 23

    1 stmts: stmt .
    4 stmt: IF '(' expr ')' stmt .

    $end      reduce using rule 4 (stmt)
    IDENT     reduce using rule 1 (stmts)
    IDENT     [reduce using rule 4 (stmt)]
    IF        reduce using rule 1 (stmts)
    IF        [reduce using rule 4 (stmt)]
    ELSE      reduce using rule 1 (stmts)
    ELSE      [reduce using rule 4 (stmt)]
    $default  reduce using rule 1 (stmts)


state 24

    5 stmt: IF '(' expr ')' stmts ELSE . stmts

    IDENT  shift, and go to state 1
    IF     shift, and go to state 2

    stmts  go to state 25
    stmt   go to state 4


state 25

    2 stmts: stmts . stmt
    5 stmt: IF '(' expr ')' stmts ELSE stmts .

    IDENT  shift, and go to state 1
    IF     shift, and go to state 2

    IDENT     [reduce using rule 5 (stmt)]
    IF        [reduce using rule 5 (stmt)]
    $default  reduce using rule 5 (stmt)

    stmt  go to state 8
